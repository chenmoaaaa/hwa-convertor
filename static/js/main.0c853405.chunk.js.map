{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","nowTexting","nowPinyin","Array","hwaMap","chr","newPinyin","match","replace","hwaConvert","nowText","hanyu","pinyin","style","STYLE_NORMAL","forEach","index","thisArray","handleText","event","target","value","setState","this","className","display","verticalAlign","marginRight","width","TextField","multiline","maxRows","onChange","join","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTAuFeA,G,iNAjFbC,MAAQ,CACNC,WAAY,KACZC,UAAWC,MAAM,I,EAGnBC,OAAS,SAACC,GACR,IAAIC,EAAYD,EAAI,GAapB,OAXGC,EAAUC,MAAM,SACjBD,EAAYA,EAAUE,QAAQ,IAAI,MAC3BF,EAAUC,MAAM,WACvBD,EAAYA,EAAUE,QAAQ,IAAI,KAAKA,QAAQ,IAAI,MACrCD,MAAM,SAClBD,EAAYA,EAAUE,QAAQ,IAAI,OAE7BF,EAAUC,MAAM,cACvBD,EAAYA,EAAUE,QAAQ,IAAI,OAGjCF,EAAUC,MAAM,aACV,CAACD,EAAUE,QAAQ,IAAI,MACvBF,EAAUC,MAAM,QAChB,CAACD,EAAUE,QAAQ,IAAI,OACvBF,EAAUC,MAAM,QAChB,CAACD,EAAUE,QAAQ,IAAI,MACvBH,EAAI,GAAGE,MAAM,WACb,CAACD,EAAUE,QAAQ,IAAI,OACvBF,EAAUC,MAAM,mBAAqBD,EAAUC,MAAM,cACrD,CAACD,EAAUE,QAAQ,IAAI,OACvBF,EAAUC,MAAM,OAChB,CAACD,EAAUE,QAAQ,KAAK,OACxBF,EAAUC,MAAM,OAChB,CAACD,EAAUE,QAAQ,KAAK,QACV,QAAdF,EACA,CAACA,EAAUE,QAAQ,KAAK,OACxBF,EAAUC,MAAM,SAAWD,EAAUC,MAAM,SAC3C,CAACD,EAAUE,QAAQ,KAAK,OACxBF,EAAUC,MAAM,QAAUD,EAAUC,MAAM,UAC1C,CAACD,EAAUE,QAAQ,KAAK,OAAOA,QAAQ,OAAO,QAE9C,CAACF,I,EAIZG,WAAa,SAACC,GACZ,IAAIC,EAAQC,IAAOF,EAAS,CAACG,MAAOD,IAAOE,eAI3C,OAHAH,EAAMI,SAAS,SAACV,EAAKW,EAAOC,GAC1BA,EAAUD,GAAS,EAAKZ,OAAOC,MAE1BM,G,EAGTO,WAAa,SAAAC,GACX,IAAMlB,EAAakB,EAAMC,OAAOC,MAC1BnB,EAAY,EAAKO,WAAWR,GAClC,EAAKqB,SAAS,CAAErB,aAAYC,e,wEAGpB,IAAD,EAC2BqB,KAAKvB,MAA/BC,EADD,EACCA,WAAYC,EADb,EACaA,UACpB,OACE,yBAAKsB,UAAU,OACb,4BAAQA,UAAU,cAAlB,oDAGA,yBAAKA,UAAU,aACb,yBAAKX,MAAO,CAACY,QAAS,eAAgBC,cAAc,MAAOC,YAAa,OAAQC,MAAO,SACrF,kBAACC,EAAA,EAAD,CAAWC,WAAS,EAACC,QAAQ,KAAKlB,MAAO,CAAEe,MAAO,QAAUP,MAAQpB,EAAa+B,SAAUT,KAAKL,cAElG,yBAAKM,UAAU,UACXtB,EAAU+B,KAAK,OAGrB,4BAAQT,UAAU,cAAlB,6B,GA1EUU,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS/B,MACvB,2DCZNgC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0c853405.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport pinyin from 'pinyin';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    nowTexting: null,\n    nowPinyin: Array(0)\n  };\n\n  hwaMap = (chr) => {\n    let newPinyin = chr[0];\n\n    if(newPinyin.match(/^[nl]/)){\n      newPinyin = newPinyin.replace('v','yu');\n    }else if(newPinyin.match(/^[jqx]/)){\n      newPinyin = newPinyin.replace('q','c').replace('x','s');\n      if(!newPinyin.match(/iu$/)){\n        newPinyin = newPinyin.replace('u','yu');\n      }\n    }else if(newPinyin.match(/^c[aeou]/)){\n      newPinyin = newPinyin.replace('c','ts');\n    }\n\n    if(newPinyin.match(/^[zcs]hi$/)){\n      return [newPinyin.replace('i','j')];\n    }else if(newPinyin.match(/^ri$/)){\n      return [newPinyin.replace('i','hj')];\n    }else if(newPinyin.match(/^zi$/)){\n      return [newPinyin.replace('i','j')];\n    }else if(chr[0].match(/^[cs]i$/)){\n      return [newPinyin.replace('i','ze')];\n    }else if(newPinyin.match(/^[dtnlgkhzs]e$/) || newPinyin.match(/^[zcst].e$/)){\n      return [newPinyin.replace('e','er')];\n    }else if(newPinyin.match(/ei$/)){\n      return [newPinyin.replace('ei','ey')];\n    }else if(newPinyin.match(/iu$/)){\n      return [newPinyin.replace('iu','iou')];\n    }else if(newPinyin === 'you'){\n      return [newPinyin.replace('ou','oo')];\n    }else if(newPinyin.match(/ian$/) || newPinyin.match(/^yan$/)){\n      return [newPinyin.replace('an','en')];\n    }else if(newPinyin.match(/un$/) && newPinyin.match(/^[jcs]/)){\n      return [newPinyin.replace('un','eun').replace('yeun','eun')];\n    }else{\n      return [newPinyin];\n    }\n  }\n\n  hwaConvert = (nowText) => {\n    let hanyu = pinyin(nowText, {style: pinyin.STYLE_NORMAL});\n    hanyu.forEach( (chr, index, thisArray) => {\n      thisArray[index] = this.hwaMap(chr);\n    });\n    return hanyu;\n  }\n  \n  handleText = event => {\n    const nowTexting = event.target.value;\n    const nowPinyin = this.hwaConvert(nowTexting);\n    this.setState({ nowTexting, nowPinyin });\n  }\n\n  render() {\n    const { nowTexting, nowPinyin } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          華語羅馬化轉換器\n        </header>\n        <div className=\"App-Panel\">\n          <div style={{display: \"inline-block\", verticalAlign:\"top\" ,marginRight: \"16px\", width: \"45vw\"}}>\n            <TextField multiline maxRows=\"20\" style={{ width: \"100%\" }} value={ nowTexting } onChange={this.handleText}></TextField>\n          </div>\n          <div className=\"Pinyin\">\n            { nowPinyin.join(\" \") }\n          </div>\n        </div>\n        <footer className=\"App-footer\">\n          Designed by phlinhng\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}